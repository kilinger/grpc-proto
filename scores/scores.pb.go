// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scores.proto

/*
Package scores is a generated protocol buffer package.

It is generated from these files:
	scores.proto

It has these top-level messages:
	CreateRequest
	ScoreResponse
	ListRequest
	ListResponse
	StatRequest
	StatResponse
	ExchangeRequest
	ExchangeResponse
*/
package scores

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	UserId int64  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Score  int32  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	Note   string `protobuf:"bytes,3,opt,name=note" json:"note,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *CreateRequest) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *CreateRequest) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type ScoreResponse struct {
	Code      string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	UserId    int64  `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Score     int32  `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	Note      string `protobuf:"bytes,5,opt,name=note" json:"note,omitempty"`
	CreatedAt string `protobuf:"bytes,6,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	GiftId    int64  `protobuf:"varint,7,opt,name=gift_id,json=giftId" json:"gift_id,omitempty"`
	GiftName  string `protobuf:"bytes,8,opt,name=gift_name,json=giftName" json:"gift_name,omitempty"`
}

func (m *ScoreResponse) Reset()                    { *m = ScoreResponse{} }
func (m *ScoreResponse) String() string            { return proto.CompactTextString(m) }
func (*ScoreResponse) ProtoMessage()               {}
func (*ScoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ScoreResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ScoreResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ScoreResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ScoreResponse) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ScoreResponse) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *ScoreResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ScoreResponse) GetGiftId() int64 {
	if m != nil {
		return m.GiftId
	}
	return 0
}

func (m *ScoreResponse) GetGiftName() string {
	if m != nil {
		return m.GiftName
	}
	return ""
}

type ListRequest struct {
	Page       int32  `protobuf:"varint,1,opt,name=page" json:"page,omitempty"`
	Count      int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	UserId     int64  `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Start      string `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	End        string `protobuf:"bytes,5,opt,name=end" json:"end,omitempty"`
	ScoreStart int64  `protobuf:"varint,6,opt,name=score_start,json=scoreStart" json:"score_start,omitempty"`
	ScoreEnd   int64  `protobuf:"varint,7,opt,name=score_end,json=scoreEnd" json:"score_end,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ListRequest) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *ListRequest) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *ListRequest) GetScoreStart() int64 {
	if m != nil {
		return m.ScoreStart
	}
	return 0
}

func (m *ListRequest) GetScoreEnd() int64 {
	if m != nil {
		return m.ScoreEnd
	}
	return 0
}

type ListResponse struct {
	Total   int32            `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Results []*ScoreResponse `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *ListResponse) GetResults() []*ScoreResponse {
	if m != nil {
		return m.Results
	}
	return nil
}

type StatRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *StatRequest) Reset()                    { *m = StatRequest{} }
func (m *StatRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRequest) ProtoMessage()               {}
func (*StatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type StatResponse struct {
	Code  string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg   string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Score int64  `protobuf:"varint,3,opt,name=score" json:"score,omitempty"`
}

func (m *StatResponse) Reset()                    { *m = StatResponse{} }
func (m *StatResponse) String() string            { return proto.CompactTextString(m) }
func (*StatResponse) ProtoMessage()               {}
func (*StatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *StatResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *StatResponse) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

type ExchangeRequest struct {
	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Score    int32  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
	GiftId   int64  `protobuf:"varint,3,opt,name=gift_id,json=giftId" json:"gift_id,omitempty"`
	GiftName string `protobuf:"bytes,4,opt,name=gift_name,json=giftName" json:"gift_name,omitempty"`
}

func (m *ExchangeRequest) Reset()                    { *m = ExchangeRequest{} }
func (m *ExchangeRequest) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRequest) ProtoMessage()               {}
func (*ExchangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ExchangeRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ExchangeRequest) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ExchangeRequest) GetGiftId() int64 {
	if m != nil {
		return m.GiftId
	}
	return 0
}

func (m *ExchangeRequest) GetGiftName() string {
	if m != nil {
		return m.GiftName
	}
	return ""
}

type ExchangeResponse struct {
	Code      string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	UserId    int64  `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Score     int32  `protobuf:"varint,4,opt,name=score" json:"score,omitempty"`
	Note      string `protobuf:"bytes,5,opt,name=note" json:"note,omitempty"`
	GiftId    int64  `protobuf:"varint,6,opt,name=gift_id,json=giftId" json:"gift_id,omitempty"`
	GiftName  string `protobuf:"bytes,7,opt,name=gift_name,json=giftName" json:"gift_name,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
}

func (m *ExchangeResponse) Reset()                    { *m = ExchangeResponse{} }
func (m *ExchangeResponse) String() string            { return proto.CompactTextString(m) }
func (*ExchangeResponse) ProtoMessage()               {}
func (*ExchangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ExchangeResponse) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ExchangeResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ExchangeResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ExchangeResponse) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *ExchangeResponse) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *ExchangeResponse) GetGiftId() int64 {
	if m != nil {
		return m.GiftId
	}
	return 0
}

func (m *ExchangeResponse) GetGiftName() string {
	if m != nil {
		return m.GiftName
	}
	return ""
}

func (m *ExchangeResponse) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "scores.CreateRequest")
	proto.RegisterType((*ScoreResponse)(nil), "scores.ScoreResponse")
	proto.RegisterType((*ListRequest)(nil), "scores.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "scores.ListResponse")
	proto.RegisterType((*StatRequest)(nil), "scores.StatRequest")
	proto.RegisterType((*StatResponse)(nil), "scores.StatResponse")
	proto.RegisterType((*ExchangeRequest)(nil), "scores.ExchangeRequest")
	proto.RegisterType((*ExchangeResponse)(nil), "scores.ExchangeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Score service

type ScoreClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*ScoreResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...client.CallOption) (*StatResponse, error)
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...client.CallOption) (*ExchangeResponse, error)
}

type scoreClient struct {
	c           client.Client
	serviceName string
}

func NewScoreClient(serviceName string, c client.Client) ScoreClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "scores"
	}
	return &scoreClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *scoreClient) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*ScoreResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Score.Create", in)
	out := new(ScoreResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Score.List", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) Stat(ctx context.Context, in *StatRequest, opts ...client.CallOption) (*StatResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Score.Stat", in)
	out := new(StatResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scoreClient) Exchange(ctx context.Context, in *ExchangeRequest, opts ...client.CallOption) (*ExchangeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Score.Exchange", in)
	out := new(ExchangeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Score service

type ScoreHandler interface {
	Create(context.Context, *CreateRequest, *ScoreResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	Stat(context.Context, *StatRequest, *StatResponse) error
	Exchange(context.Context, *ExchangeRequest, *ExchangeResponse) error
}

func RegisterScoreHandler(s server.Server, hdlr ScoreHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Score{hdlr}, opts...))
}

type Score struct {
	ScoreHandler
}

func (h *Score) Create(ctx context.Context, in *CreateRequest, out *ScoreResponse) error {
	return h.ScoreHandler.Create(ctx, in, out)
}

func (h *Score) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.ScoreHandler.List(ctx, in, out)
}

func (h *Score) Stat(ctx context.Context, in *StatRequest, out *StatResponse) error {
	return h.ScoreHandler.Stat(ctx, in, out)
}

func (h *Score) Exchange(ctx context.Context, in *ExchangeRequest, out *ExchangeResponse) error {
	return h.ScoreHandler.Exchange(ctx, in, out)
}

func init() { proto.RegisterFile("scores.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xae, 0xbb, 0x3f, 0xd9, 0x9d, 0xa4, 0xa2, 0x1a, 0x82, 0xba, 0x4a, 0x85, 0x88, 0x7c, 0x40,
	0x39, 0x15, 0xa9, 0xbd, 0x70, 0x43, 0x08, 0xf5, 0x50, 0x84, 0x38, 0x38, 0xe2, 0x1c, 0x99, 0x5d,
	0x13, 0x22, 0x35, 0xeb, 0xb0, 0x76, 0x10, 0x4f, 0xc6, 0x5b, 0x20, 0xf1, 0x20, 0x3c, 0x04, 0xf2,
	0x78, 0xb7, 0xfb, 0x43, 0x0a, 0x82, 0x03, 0xb7, 0x99, 0xf1, 0x8c, 0x67, 0xbe, 0xf9, 0x3e, 0x1b,
	0x26, 0x26, 0xd7, 0x95, 0x32, 0x17, 0xbb, 0x4a, 0x5b, 0x8d, 0xb1, 0xf7, 0xb8, 0x80, 0x93, 0x57,
	0x95, 0x92, 0x56, 0x09, 0xf5, 0x69, 0xaf, 0x8c, 0xc5, 0x33, 0x18, 0xed, 0x8d, 0xaa, 0x56, 0x9b,
	0x22, 0x63, 0x73, 0xb6, 0x08, 0x44, 0xec, 0xdc, 0x9b, 0x02, 0xa7, 0x10, 0x51, 0x4d, 0x76, 0x3c,
	0x67, 0x8b, 0x48, 0x78, 0x07, 0x11, 0xc2, 0x52, 0x5b, 0x95, 0x05, 0x73, 0xb6, 0x48, 0x05, 0xd9,
	0xfc, 0x1b, 0x83, 0x93, 0xa5, 0x3b, 0x15, 0xca, 0xec, 0x74, 0x69, 0x28, 0x2b, 0xd7, 0x85, 0xa2,
	0x1b, 0x53, 0x41, 0x36, 0x9e, 0x42, 0xb0, 0x35, 0x6b, 0xba, 0x2d, 0x15, 0xce, 0xec, 0xb6, 0x0e,
	0x0e, 0xb7, 0x0e, 0x0f, 0xb5, 0x8e, 0xda, 0xd6, 0xf8, 0x18, 0x20, 0x27, 0x38, 0xc5, 0x4a, 0xda,
	0x2c, 0xa6, 0x93, 0xb4, 0x8e, 0xbc, 0x24, 0x70, 0xeb, 0xcd, 0x07, 0xeb, 0x3a, 0x8c, 0x7c, 0x07,
	0xe7, 0xde, 0x14, 0x78, 0x0e, 0x29, 0x1d, 0x94, 0x72, 0xab, 0xb2, 0x84, 0xca, 0x12, 0x17, 0x78,
	0x2b, 0xb7, 0x8a, 0x7f, 0x65, 0x30, 0x7e, 0xb3, 0x31, 0xb6, 0x59, 0x11, 0x42, 0xb8, 0x93, 0x6b,
	0x8f, 0x26, 0x12, 0x64, 0xbb, 0x11, 0x73, 0xbd, 0x2f, 0x6d, 0xb3, 0x1d, 0x72, 0x7e, 0x8f, 0xc8,
	0xca, 0xca, 0x12, 0xa2, 0x54, 0x78, 0xc7, 0xad, 0x44, 0x95, 0x45, 0x0d, 0xc8, 0x99, 0xf8, 0x04,
	0xc6, 0x04, 0x76, 0xe5, 0xb3, 0x63, 0xba, 0x04, 0x28, 0xb4, 0xa4, 0x92, 0x73, 0x48, 0x7d, 0x82,
	0x2b, 0xf4, 0x98, 0x12, 0x0a, 0x5c, 0x97, 0x05, 0x7f, 0x07, 0x13, 0x3f, 0x77, 0x4d, 0xc3, 0x14,
	0x22, 0xab, 0xad, 0xbc, 0xad, 0x27, 0xf7, 0x0e, 0x3e, 0x83, 0x51, 0xa5, 0xcc, 0xfe, 0xd6, 0x9a,
	0xec, 0x78, 0x1e, 0x2c, 0xc6, 0x97, 0x8f, 0x2e, 0x6a, 0xa9, 0xf4, 0x48, 0x14, 0x4d, 0x16, 0x7f,
	0x0a, 0xe3, 0xa5, 0x95, 0xf6, 0x4f, 0x8a, 0xe1, 0xaf, 0x61, 0xe2, 0xf3, 0xfe, 0x4a, 0x05, 0x77,
	0x64, 0xfb, 0x8d, 0x79, 0x87, 0x7f, 0x86, 0x07, 0xd7, 0x5f, 0xf2, 0x8f, 0xb2, 0x5c, 0xff, 0xab,
	0x52, 0x3b, 0xdc, 0x07, 0xf7, 0x73, 0x1f, 0x0e, 0xb8, 0xff, 0xce, 0xe0, 0xb4, 0x6d, 0xfc, 0xbf,
	0xe5, 0xdc, 0x99, 0x39, 0xbe, 0x7f, 0xe6, 0x51, 0x7f, 0xe6, 0xc1, 0x23, 0x48, 0x06, 0x8f, 0xe0,
	0xf2, 0x07, 0x83, 0x88, 0x98, 0xc5, 0xe7, 0x10, 0xfb, 0xc7, 0x8f, 0x77, 0x94, 0xf7, 0x3e, 0x83,
	0xd9, 0x61, 0x25, 0xf0, 0x23, 0xbc, 0x82, 0xd0, 0x29, 0x0b, 0x1f, 0x36, 0x09, 0x9d, 0xf7, 0x31,
	0x9b, 0xf6, 0x83, 0xdd, 0x22, 0xa7, 0x87, 0xb6, 0xa8, 0xa3, 0xa2, 0xb6, 0xa8, 0x2b, 0x19, 0x7e,
	0x84, 0x2f, 0x20, 0x69, 0xf6, 0x8f, 0x67, 0x4d, 0xce, 0x40, 0x0a, 0xb3, 0xec, 0xd7, 0x83, 0xe6,
	0x82, 0xf7, 0x31, 0x7d, 0x78, 0x57, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xa4, 0x02, 0x47,
	0x00, 0x05, 0x00, 0x00,
}
